{
  "hash": "b6a0e04d3f2a80422959689039a7128c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Philadelphia Housing Price Prediction - Technical Appendix\"\nauthor: Nina Carlsen, Ryan Drake, Sujanesh Kakumanu, Kavana Raju, Chloe Robinson, Henry Sywulak-Herr.\nexecute:\n  cache: true\nformat: \n  html:\n    code-fold: show\n    toc: true\n    toc-location: left\n    theme: cosmo\n    number-sections: true\n---\n\nThis technical appendix documents the full workflow used to engineer and visualize spatial features for predicting residential housing prices in Philadelphia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\n\n# Packages\nif(!require(pacman)){install.packages(\"pacman\"); library(pacman, quietly = T)}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: pacman\n```\n\n\n:::\n\n```{.r .cell-code}\np_load(knitr, sf, tidyverse, tidycensus, tigris, here, dplyr, FNN, ggplot2, scales, patchwork, caret, Hmisc, stargazer)\n\n# Files\nsf_data <- st_read(\"./data/OPA_data.geojson\", quiet = TRUE)\nnhoods <- st_read(\"./data/philadelphia-neighborhoods.geojson\", quiet = TRUE)\n```\n:::\n\n\n# Property sales data\n\n## Data Preparation\n\nWe apply several filters to the property data to for quality and relevance. First, we restrict our analysis to residential properties sold between 2023 and 2024, excluding any other property categories. Second, we remove properties with sale prices below \\$10, as these are abnormal prices for residential properties.\n\nTo work with Github file size limits, the data is further trimmed of irrelevant columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Restrict to residential only\nresidential_categories <- c(\n  \"APARTMENTS > 4 UNITS\",\n  \"MULTI FAMILY\",\n  \"SINGLE FAMILY\",\n  \"MIXED USE\"\n)\nresidential_data <- sf_data %>%\n  filter(category_code_description %in% residential_categories,\n         year(sale_date) %in% c(2023, 2024),\n         mailing_city_state == \"PHILADELPHIA PA\",\n         sale_price > 10\n         )\n\ntable(residential_data$category_code_description)\n\n# Making sure the file saved to the repo is the trimmed data (to stay below GitHub data limits)\nst_write(residential_data, \"./data/OPA_data.geojson\", driver = \"GeoJSON\", delete_dsn = TRUE, quiet = TRUE)\nfile.exists(\"./data/OPA_data.geojson\")\nOPA_data <- st_read(\"./data/OPA_data.geojson\", quiet = TRUE) %>% \n  st_transform(2272)\n\n# OPA_data -> cutting mostly NA columns or irrelevant columns for this model.\nOPA_data <- OPA_data %>%\n  select(-c(\n  cross_reference, date_exterior_condition, exempt_land, fireplaces, fuel, garage_type, house_extension, mailing_address_2, mailing_care_of, market_value_date, number_of_rooms, other_building, owner_2, separate_utilities, sewer, site_type, street_direction, suffix, unfinished, unit, utility\n  ))\n\nnames(OPA_data)\n```\n:::\n\n\n## Exploratory Data Analysis\n\nBelow are selected property variables—Total Livable Area, Bedrooms, Bathrooms, and Age—in relation to Sale Price. Properties with excessive square footage (\\>10,000 sqft), missing bedroom or bathroom data, over 12 bathrooms with low sale prices, or implausible construction years were removed to reduce skew and data errors. This additional filtering was kept for the rest of the analysis in this report.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter out outliers from the dataset\nOPA_data <- OPA_data %>%\n  filter(\n    total_livable_area <= 10000,\n    year_built > 1800,\n    !is.na(number_of_bathrooms),\n    !is.na(number_of_bedrooms),\n    number_of_bathrooms < 12,\n  ) %>%\n  mutate(\n    year_built = as.numeric(year_built),\n    building_age = 2025 - year_built\n  )\n\np1 <- ggplot(OPA_data, aes(x = total_livable_area, y = sale_price)) +\n  geom_point(alpha = 0.3, size = 0.8) +\n  geom_smooth(method = \"lm\", color = \"red\", se = TRUE) +\n  scale_y_continuous(labels = dollar_format()) +\n  scale_x_continuous(labels = comma_format()) +\n  labs(\n    title = \"Sale Price vs. Total Livable Area\",\n    x = \"Total Livable Area (sq ft)\",\n    y = \"Sale Price\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"))\n\np2 <- ggplot(OPA_data, aes(x = factor(number_of_bedrooms), y = sale_price)) +\n  geom_boxplot(fill = \"gray\", alpha = 0.6, outlier.alpha = 0.3, outlier.size = 0.5) +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 2, shape = 18) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Sale Price vs. Number of Bedrooms\",\n    x = \"Number of Bedrooms\",\n    y = \"Sale Price\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"))\n\np3 <- ggplot(OPA_data, aes(x = factor(number_of_bathrooms), y = sale_price)) +\n  geom_boxplot(fill = \"gray\", alpha = 0.6, outlier.alpha = 0.3, outlier.size = 0.5) +\n  stat_summary(fun = mean, geom = \"point\", color = \"red\", size = 2, shape = 18) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Sale Price vs. Number of Bathrooms\",\n    x = \"Number of Bathrooms\",\n    y = \"Sale Price\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"))\n\np4 <- ggplot(OPA_data, aes(x = building_age, y = sale_price)) +\n  geom_point(alpha = 0.3, size = 0.8) +\n  geom_smooth(method = \"lm\", color = \"red\", se = TRUE) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Sale Price vs. Age\",\n    x = \"Age\",\n    y = \"Sale Price\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 10, face = \"bold\"))\n\n# Combine plots\n(p1 | p2) / (p3 | p4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/filtering-OPA-and-plots-1.png){width=672}\n:::\n:::\n\n\n## Feature Engineering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOPA_data <- OPA_data %>%\n  mutate(\n    # convert to numeric before interactions\n    total_livable_area = as.numeric(total_livable_area),\n    census_tract = as.numeric(as.character(census_tract)),\n    year_built = as.numeric(year_built),\n    total_area = as.numeric(total_area),\n    market_value = as.numeric(market_value),\n    number_of_bedrooms = as.numeric(number_of_bedrooms),\n\n    # building code and total area\n    int_type_tarea = as.numeric(as.factor(building_code_description)) * total_area,\n\n    # market and livable area\n    int_value_larea = market_value * total_livable_area,\n\n    # market and total area\n    int_value_tarea = market_value * total_area,\n\n    # livable area and exterior condition\n    int_larea_econd = total_livable_area * as.numeric(as.factor(exterior_condition)),\n\n    # livable area and interior condition\n    int_larea_icond = total_livable_area * as.numeric(as.factor(interior_condition)),\n\n    # livable area and bedrooms\n    int_larea_beds = total_livable_area * number_of_bedrooms\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npa_crs <- 2272  \nneighbor_points <- st_transform(OPA_data, pa_crs)\n\nnrow(nhoods)\n\nst_crs(neighbor_points)\nnhoods <- st_transform(nhoods, 2272)\n\n#joining houses to  neighborhoods\nneighbor_points <- neighbor_points %>%\n  st_join(nhoods, join = st_intersects)\n\n\n#results \nneighbor_points %>%\n  st_drop_geometry() %>%\n  count(NAME) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#spatial joins\nprice_by_nhood <- neighbor_points %>%\n  st_drop_geometry() %>%\n  group_by(NAME) %>%\n  dplyr::summarize(\n    median_price = median(sale_price, na.rm = TRUE),\n    n_sales = n()\n  )\n\nnhoods_prices <- nhoods %>%\n  left_join(price_by_nhood, by = \"NAME\")\n\n#setting median house price classes\nnhoods_prices <- nhoods_prices %>%\n  mutate(\n    price_class = cut(median_price,\n                      breaks = c(0, 400000, 600000, 800000, 1000000, Inf),\n                      labels = c(\"Under $400k\", \"$400k-$600k\", \"$600k-$800k\", \n                                 \"$800k-$1M\", \"Over $1M\"),\n                      include.lowest = TRUE)\n  )\n\n#mapping\nggplot() +\n  geom_sf(data = nhoods_prices, aes(fill = price_class), \n          color = \"white\", size = 0.5) +\n  scale_fill_brewer(\n    name = \"Median Price\",\n    palette = \"YlOrRd\",  # Try also: \"Reds\", \"OrRd\", \"YlGnBu\", \"PuRd\"\n    na.value = \"grey90\",\n    direction = 1  # Use -1 to reverse (dark = low)\n  ) +\n  labs(\n    title = \"Median Home Prices by Philadlephia Neighborhood\",\n  ) +\n  theme_void() +\n  theme(\n    legend.position = \"right\",\n    plot.title = element_text(face = \"bold\", size = 14),\n    legend.title = element_text(face = \"bold\")\n  )\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/prices-by-neighborhood-and-map-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_by_nhood %>%\n  arrange(desc(median_price)) %>%\n  head(10)\n\nprice_by_nhood %>%\n  arrange(desc(median_price)) %>%\n  print(n = 50)\n\nprice_by_nhood %>%\n  arrange(desc(median_price)) %>%\n  print(n = 50)\n\nprice_by_nhood %>%\n  arrange(desc(n_sales)) %>%\n  head(5)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define wealthy as >=$420,000 which is 1.5x city median of 279,900\nwealthy_hoods <- c(\"FITLER_SQUARE\", \"CHESTNUT_HILL\", \"UNIVERISTY_CITY\", \"SPRUCE_HILL\", \"QUEEN_VILLAGE\", \"GRADUATE_HOSPITAL\", \"PACKER_PARK\", \"RITTENHOUSE\", \"NORTHERN_LIBERTIES\", \"HAWTHORNE\", \"FANCISVILLE\", \"BELLA_VISTA\", \"SOCIETY_HILL\", \"GARDEN_COURT\", \"CEDAR_PARK\", \"EAST_PARK\", \"MOUNT_AIRY_WEST\", \"FAIRMOUNT\", \"LOGAN_SQUARE\", \"WOODLAND_TERRACE\", \"RIVERFRONT\", \"PASSYUNK_SQUARE\", \"ROXBOROUGH_PARK\", \"OLD_KENSINGTON\", \"WASHINGTON_SQUARE\", \"FISHTOWN\"\n)\n\n# Binary Split \nnhoods_prices <- nhoods_prices %>%\n  mutate(\n    wealthy_neighborhood = ifelse(NAME %in% wealthy_hoods, \"Wealthy\", \"Not Wealthy\"),\n    wealthy_neighborhood = as.factor(wealthy_neighborhood)\n  )\n\nnhoods_prices %>%\n  st_drop_geometry() %>%\n  count(wealthy_neighborhood)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  wealthy_neighborhood   n\n1          Not Wealthy 135\n2              Wealthy  24\n```\n\n\n:::\n\n```{.r .cell-code}\nneighbor_points <- neighbor_points %>%\n  st_join(nhoods_prices, by = \"NAME\")\n\n# Still add neighbor points to OPA data\n```\n:::\n\n\nHouseholds were denoted as wealthy if their median household price was over \\$420,000, which is 1.5x city median of 279,900. This term will be used in an interaction in Model 4 to account for theoretical differences in wealthy neighborhoods, such as inflated costs for additional home amenities such as bedrooms, bathrooms, or livable floor area.\n\n# Census Data\n\n## Data Preparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# link variables and aliases\nvars <- c(\"pop_tot\" = \"B01001_001\",\n          \"med_hh_inc\" = \"B19013_001\",\n          \"med_age\" = \"B01002_001\")\n\n# the FIPS code for the state of PA is 42\nfips_pa <- 42\n```\n:::\n\n\nVariables pulled from the census include total population, median household income, and median age.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retrieve data from the ACS for 2023\ndemo_vars_pa <- get_acs(geography = \"tract\",\n                        variable = vars,\n                        year = 2023,\n                        state = fips_pa,\n                        output = \"wide\",\n                        geometry = T,\n                        progress_bar = F) %>% \n  st_transform(2272)\n\n# separate NAME column into its constituent parts\ndemo_vars_pa <- demo_vars_pa %>%\n  separate(NAME,\n           into = c(\"TRACT\", \"COUNTY\", \"STATE\"),\n           sep = \"; \",\n           remove = T) %>% \n  mutate(TRACT = parse_number(TRACT),\n         COUNTY = sub(x = COUNTY, \" County\", \"\"))\n\n# filter out Philadelphia tracts\ndemo_vars_phl <- demo_vars_pa %>%\n  filter(COUNTY == \"Philadelphia\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot cenusus variables to compare\nplot(demo_vars_phl[,\"pop_totE\"],\n     main = \"Total Population\",\n     breaks = seq(0, 10500, 500),\n     nbreaks = 21)\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/census-plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(demo_vars_phl[,\"med_hh_incE\"],\n     main = \"Median Household Income\",\n     breaks = seq(0, 200000, 10000),\n     nbreaks = 20)\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/census-plot-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(demo_vars_phl[,\"med_ageE\"],\n     main = \"Median Age\",\n     breaks = seq(0, 75, 5),\n     nbreaks = 15)\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/census-plot-3.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get NA counts per column\nna_counts <- sapply(demo_vars_phl, function(x) {sum(is.na(x))})\nkable(t(as.data.frame(na_counts)))\n```\n\n::: {.cell-output-display}\n\n\n|          | GEOID| TRACT| COUNTY| STATE| pop_totE| pop_totM| med_hh_incE| med_hh_incM| med_ageE| med_ageM| geometry|\n|:---------|-----:|-----:|------:|-----:|--------:|--------:|-----------:|-----------:|--------:|--------:|--------:|\n|na_counts |     0|     0|      0|     0|        0|        0|          27|          27|       17|       17|        0|\n\n\n:::\n\n```{.r .cell-code}\n# filter out all rows that have at least one column with an na value\nna_index <- !complete.cases(demo_vars_phl %>% st_drop_geometry())\ndemo_vars_phl_na <- demo_vars_phl[na_index,]\nkable(head(demo_vars_phl_na, 5) %>% select(-ends_with(\"M\")) %>% st_drop_geometry(),\n      col.names = c(\"GeoID\", \"Tract\", \"County\", \"State\", \"Population\", \"Median HH Inc ($)\", \"Median Age (yrs)\"),\n      row.names = F)\n```\n\n::: {.cell-output-display}\n\n\n|GeoID       |   Tract|County       |State        | Population| Median HH Inc ($)| Median Age (yrs)|\n|:-----------|-------:|:------------|:------------|----------:|-----------------:|----------------:|\n|42101016500 |  165.00|Philadelphia |Pennsylvania |       2165|                NA|             44.1|\n|42101980902 | 9809.02|Philadelphia |Pennsylvania |          0|                NA|               NA|\n|42101980800 | 9808.00|Philadelphia |Pennsylvania |          0|                NA|               NA|\n|42101028500 |  285.00|Philadelphia |Pennsylvania |       2625|                NA|             36.1|\n|42101036901 |  369.01|Philadelphia |Pennsylvania |         49|                NA|             42.1|\n\n\n:::\n:::\n\n\n27 and 17 census tracts have a value of NA for median household income and median age, respectively. For the 17 census tracts where there is no reported population, the median household income and median age will be set to 0. The remaining 10 census tracts that have population but no reported median household income will be omitted from the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a dataset with NAs replaced with zero where applicable\ndemo_vars_phl_rep <- demo_vars_phl %>% \n  mutate(med_hh_incE = case_when(pop_totE == 0 & is.na(med_hh_incE) ~ 0,\n                                 .default = med_hh_incE),\n         med_ageE = case_when(pop_totE == 0 & is.na(med_ageE) ~ 0,\n                                 .default = med_ageE))\n\n# final cleaned dataset without the 10 census tracts that have population values but have NA values for Median Household Income\ndemo_vars_phl_clean <- demo_vars_phl_rep[complete.cases(demo_vars_phl_rep %>%\n                                                          select(-ends_with(\"M\")) %>%\n                                                          st_drop_geometry()),]\n\n# table with the omitted census tracts\ndemo_vars_phl_omit <- demo_vars_phl_rep[!complete.cases(demo_vars_phl_rep %>% select(-ends_with(\"M\")) %>% st_drop_geometry()),]\nkable(demo_vars_phl_omit %>% select(-ends_with(\"M\")) %>% st_drop_geometry(),\n      col.names = c(\"GeoID\", \"Tract\", \"County\", \"State\", \"Population\", \"Median HH Inc ($)\", \"Median Age (yrs)\"),\n      row.names = F, caption = \"Census Tracts Omitted from Analysis due to Data Unavailability\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Census Tracts Omitted from Analysis due to Data Unavailability\n\n|GeoID       |   Tract|County       |State        | Population| Median HH Inc ($)| Median Age (yrs)|\n|:-----------|-------:|:------------|:------------|----------:|-----------------:|----------------:|\n|42101016500 |  165.00|Philadelphia |Pennsylvania |       2165|                NA|             44.1|\n|42101028500 |  285.00|Philadelphia |Pennsylvania |       2625|                NA|             36.1|\n|42101036901 |  369.01|Philadelphia |Pennsylvania |         49|                NA|             42.1|\n|42101014800 |  148.00|Philadelphia |Pennsylvania |        892|                NA|             40.9|\n|42101027700 |  277.00|Philadelphia |Pennsylvania |       5489|                NA|             36.9|\n|42101030100 |  301.00|Philadelphia |Pennsylvania |       6446|                NA|             37.2|\n|42101989100 | 9891.00|Philadelphia |Pennsylvania |       1240|                NA|             29.7|\n|42101989300 | 9893.00|Philadelphia |Pennsylvania |        160|                NA|             30.5|\n|42101020500 |  205.00|Philadelphia |Pennsylvania |       3383|                NA|             33.3|\n|42101980200 | 9802.00|Philadelphia |Pennsylvania |        396|                NA|             74.9|\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# join census variables to the OPA data\nOPA_data <- st_join(OPA_data, demo_vars_phl_clean %>% select(pop_totE, med_hh_incE, med_ageE))\n\n# isolate NA rows and plot where they are\ncensusNAs <- OPA_data[is.na(OPA_data$med_hh_incE),]\n\ncensus_plt1 <- ggplot() +\n  geom_sf(data = demo_vars_phl_clean$geometry) +\n  geom_sf(data = censusNAs, size = 0.15) +\n  theme_void() +\n  labs(title = \"Properties without Census Data\")\ncensus_plt2 <- ggplot() +\n  geom_sf(data = demo_vars_phl_clean$geometry, fill = \"black\", color = \"transparent\") +\n  theme_void() +\n  labs(title = \"Census Tracts with Data (Black)\")\n\n(census_plt1 | census_plt2)\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/census-join-to-OPA_data-1.png){width=672}\n:::\n:::\n\n\nOf the 22121 properties in the dataset after cleaning and omitting outliers, 248 - approximately 1.1% of the dataset - have no associated census data due to the lack of a Median Household Income value for those census tracts. Comparing plots of property locations without census data and that of census tracts which have data confirms this spatial relationship.\n\n# Spatial Features\n\n## Data Preparation\n\nThis stage prepares and validates the OpenDataPhilly spatial datasets used to engineer neighborhood-level variables for the housing model.\n\n**Steps Performed**\n\n-   Transformed all spatial datasets to **EPSG 2272 (NAD83 / PA South ftUS)** for consistent distance measurements.\n\n-   Removed invalid geometries, dropped Z/M values, and converted all housing geometries to points.\n\n-   Imported and projected OpenDataPhilly amenities:\n\n    -   Transit Stops\n\n    -   Hospitals\n\n    -   Parks & Recreation Sites\n\n    -   Schools Parcels (centroids created from polygon features)\n\n    -   Crime Incidents (2023 and 2024 combined)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#CRS & radii\npa_crs <- 2272    # NAD83 / PA South (ftUS)\nmi_to_ft   <- 5280\nr_park_ft   <- 0.25 * mi_to_ft\nr_crime_ft  <- 0.50 * mi_to_ft\nr_school_ft <- 0.50 * mi_to_ft\n\n# turn off spherical geometry (makes buffer/join ops faster)\nsf::sf_use_s2(FALSE)\n\n## CONVERT SALES DATA TO POINTS ##\nOPA_points <- st_transform(OPA_data, pa_crs)\n\n#Drop Z/M if present\nst_geometry(OPA_points) <- st_zm(st_geometry(OPA_points), drop = TRUE, what = \"ZM\")\n\n#Make geometries valid\nst_geometry(OPA_points) <- st_make_valid(st_geometry(OPA_points))\n\n#Ensure POINT geometry (works for points/lines/polygons/collections)\nst_geometry(OPA_points) <- st_point_on_surface(st_geometry(OPA_points))\n\n#Add sale ID\nOPA_points <- OPA_points %>%\n  mutate(sale_id = dplyr::row_number())\n\n#read & project layers\ntransit   <- st_read(\"./data/Transit_Stops_(Spring_2025)/Transit_Stops_(Spring_2025).shp\", quiet = TRUE) |> st_transform(pa_crs)\nhospitals <- st_read(\"./data/Hospitals.geojson\", quiet = TRUE) |> st_transform(pa_crs)\nparksrec  <- st_read(\"./data/PPR_Program_Sites.geojson\", quiet = TRUE)|> st_transform(pa_crs)\nschools_polygons   <- st_read(\"./data/Schools_Parcels.geojson\", quiet = TRUE) |> st_transform(pa_crs)\ncrime_2023     <- st_read(\"./data/crime_incidents_2023/incidents_part1_part2.shp\", quiet = TRUE)        |> st_transform(pa_crs)\ncrime_2024     <- st_read(\"./data/crime_incidents_2024/incidents_part1_part2.shp\", quiet = TRUE)        |> st_transform(pa_crs)\n\n#combine 2023 & 2024 crime datasets\ncrime <- rbind(crime_2023, crime_2024)\n\n#create centroids for schools dataset\nschools <- if (any(st_geometry_type(schools_polygons) %in% c(\"POLYGON\",\"MULTIPOLYGON\"))) {\n  st_centroid(schools_polygons, )\n} else {\n  schools_polygons\n}\n```\n:::\n\n\n## Exploratory Data Analysis\n\nExploratory plots and maps examine the raw accessibility patterns across Philadelphia before feature engineering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transit stops (raw)\nggplot() +\ngeom_sf(data = transit, size = 0.3, alpha = 0.6) +\nlabs(title = \"Raw Layer Check: Transit Stops (SEPTA Spring 2025)\") +\ntheme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/exploratory-spatial-feature-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Hospitals (raw)\nggplot() +\ngeom_sf(data = hospitals, size = 0.6, alpha = 0.7) +\nlabs(title = \"Raw Layer Check: Hospitals\") +\ntheme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/exploratory-spatial-feature-plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Parks & Recreation Program Sites (raw)\nggplot() +\ngeom_sf(data = parksrec, size = 0.4, alpha = 0.6) +\nlabs(title = \"Raw Layer Check: Parks & Recreation Sites\") +\ntheme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/exploratory-spatial-feature-plots-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Schools (centroids of polygons) — raw\nggplot() +\ngeom_sf(data = schools, size = 0.4, alpha = 0.7) +\nlabs(title = \"Raw Layer Check: Schools (Centroids)\") +\ntheme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/exploratory-spatial-feature-plots-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Crime points are huge; sampling for speed\nset.seed(5080)\ncrime_quick <- if (nrow(crime) > 30000) dplyr::slice_sample(crime, n = 30000) else crime\n\nggplot() +\ngeom_sf(data = crime_quick, size = 0.1, alpha = 0.25) +\nlabs(title = \"Raw Layer Check: Crime Incidents (sampled if large)\") +\ntheme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/exploratory-spatial-feature-plots-5.png){width=672}\n:::\n:::\n\n\n### Interpretation\n\n-   **Transit Stops:** Dense corridors radiate from Center City, showing strong transit coverage.\n\n-   **Hospitals:** Sparse but geographically balanced.\n\n-   **Parks & Recreation:** uneven distribution,\n\n-   **Schools:** evenly distributed across most neighborhoods\n\n-   **Crime:** Visibly concentrated, confirming the need for log-transformed counts\n\n## Feature Engineering\n\nSpatial features were derived using two complementary approaches: **k-Nearest Neighbor (kNN)** and **buffer-based counts,** depending on whether accessibility was best captured as proximity or exposure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| message: false\n#| warning: false\n\n#clean sales data\nsales_xy <- st_coordinates(OPA_points)\nok_sales  <- complete.cases(sales_xy)\nOPA_points <- OPA_points[ok_sales, ]    # keep only rows with valid XY\nsales_xy  <- st_coordinates(OPA_points) # refresh coordinates\n\ntransit_xy <- st_coordinates(transit)\nhosp_xy    <- st_coordinates(hospitals)\n\n# feature 1 - distance to nearest transit stop (ft)\nknn_tr <- FNN::get.knnx(\n  data  = st_coordinates(transit),\n  query = sales_xy,\n  k = 1)\n\nOPA_points <- OPA_points %>%\n  mutate(dist_nearest_transit_ft = as.numeric(knn_tr$nn.dist[,1]))\n\n# feature 2 - distance to nearest hospital (ft)\nknn_hp <- FNN::get.knnx(\n  data  = st_coordinates(hospitals),\n  query = sales_xy,\n  k = 1)\n\nOPA_points <- OPA_points %>%\n  mutate(dist_nearest_hospital_ft = as.numeric(knn_hp$nn.dist[,1]))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# feature 3 - parks/rec sites within 0.25 mi (count)\nrel_parks <- sf::st_is_within_distance(OPA_points, parksrec, dist = r_park_ft)\n\nOPA_points <- OPA_points %>%\n  mutate(parks_cnt_0p25mi = lengths(rel_parks))\n\n# feature 4 - crime count within 0.5 mi (per square mile)\ncrime_buffer <- st_buffer(OPA_points, dist = r_crime_ft)\n\nrel_crime <- st_intersects(crime_buffer, crime, sparse = TRUE)\n\n# count number of crimes\ncrime_cnt <- lengths(rel_crime)\n\nrm(rel_crime)\n\nOPA_points <- OPA_points |>\n  mutate(\n    crime_cnt_0p5mi     = crime_cnt,\n    log1p_crime_cnt_0p5 = log1p(crime_cnt_0p5mi)\n  )\n\n# feature 5 - schools within 0.5 mi (using centroids)\nrel_sch <- sf::st_is_within_distance(OPA_points, schools, dist = r_school_ft)\n\nOPA_points <- OPA_points %>%\n  mutate(schools_cnt_0p5mi = lengths(rel_sch))\n```\n:::\n\n\n### Summary Table and Justification\n\n| Feature                          | Method       | Parameter   | Theoretical Rationale                                                                                                           |\n|------------------|------------------|------------------|--------------------|\n| Distance to Nearest Transit Stop | kNN (k = 1)  | –           | Captures ease of access to public transport; nearest stop approximates walkability and job access.                              |\n| Distance to Nearest Hospital     | kNN (k = 1)  | –           | Reflects accessibility to health care and emergency services; proximity adds perceived security for households.                 |\n| Parks & Rec Sites within 0.25 mi | Buffer Count | r = 0.25 mi | Measures exposure to green space and recreational facilities within a 5-minute walk; positive amenity effect on property value. |\n| Crime Incidents within 0.5 mi    | Buffer Count | r = 0.5 mi  | Represents local safety environment; higher crime counts reduce housing desirability.                                           |\n| Schools within 0.5 mi            | Buffer Count | r = 0.5 mi  | Reflects educational access and family appeal; clustering of schools often raises residential demand.                           |\n| Population                       | Census       | –           | Represents the present residential demand within a census tract                                                                 |\n| Median Household Income          | Census       | –           | Indicative of the ability of present residents of a census tract to afford housing                                              |\n| Median Age                       | Census       | –           | Measure of the dominant age group in a census tract (i.e. high student or elderly population)                                   |\n\n### Feature Validation and Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Transit Accessibility\nggplot(OPA_points, aes(x = dist_nearest_transit_ft)) +\n  geom_histogram(fill = \"steelblue\", color = \"white\", bins = 30) +\n  labs(title = \"Distribution: Distance to Nearest Transit Stop\",\n       x = \"Feet to Nearest Stop\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(OPA_points) +\n  geom_sf(aes(color = dist_nearest_transit_ft), size = 0.5) +\n  scale_color_viridis_c(option = \"plasma\", labels = comma) +\n  labs(title = \"Transit Accessibility Across Sales Parcels\",\n       color = \"Distance (ft)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\n## Hospital Proximity\nggplot(OPA_points, aes(x = dist_nearest_hospital_ft)) +\n  geom_histogram(fill = \"darkorange\", color = \"white\", bins = 30) +\n  labs(title = \"Distribution: Distance to Nearest Hospital\",\n       x = \"Feet to Nearest Hospital\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(OPA_points) +\n  geom_sf(aes(color = dist_nearest_hospital_ft), size = 0.5) +\n  scale_color_viridis_c(option = \"magma\", labels = comma) +\n  labs(title = \"Hospital Accessibility Across Sales Parcels\",\n       color = \"Distance (ft)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-4.png){width=672}\n:::\n\n```{.r .cell-code}\n## Parks & Recreation\nggplot(OPA_points, aes(x = parks_cnt_0p25mi)) +\n  geom_histogram(fill = \"seagreen\", color = \"white\", bins = 20) +\n  labs(title = \"Distribution: Parks & Rec Sites Within 0.25 mi\",\n       x = \"Count within 0.25 mi\", y = \"Number of Parcels\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-5.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(OPA_points) +\n  geom_sf(aes(color = parks_cnt_0p25mi), size = 0.6) +\n  scale_color_viridis_c(option = \"viridis\") +\n  labs(title = \"Proximity to Parks & Recreation (0.25 mi Buffer)\",\n       color = \"Parks Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-6.png){width=672}\n:::\n\n```{.r .cell-code}\n## Crime Density\nggplot(OPA_points, aes(x = crime_cnt_0p5mi)) +\n  geom_histogram(fill = \"firebrick\", color = \"white\", bins = 30) +\n  labs(title = \"Distribution: Crime Incidents Within 0.5 mi\",\n       x = \"Crime Count (2023–2024)\", y = \"Number of Parcels\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-7.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(OPA_points) +\n  geom_sf(aes(color = log1p_crime_cnt_0p5), size = 0.6) +\n  scale_color_viridis_c(option = \"inferno\") +\n  labs(title = \"Crime Exposure (log-transformed within 0.5 mi)\",\n       color = \"log(1+Crime Count)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-8.png){width=672}\n:::\n\n```{.r .cell-code}\n## Schools Accessibility\nggplot(OPA_points, aes(x = schools_cnt_0p5mi)) +\n  geom_histogram(fill = \"purple\", color = \"white\", bins = 20) +\n  labs(title = \"Distribution: Schools Within 0.5 mi\",\n       x = \"School Count (0.5 mi Buffer)\", y = \"Number of Parcels\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-9.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(OPA_points) +\n  geom_sf(aes(color = schools_cnt_0p5mi), size = 0.6) +\n  scale_color_viridis_c(option = \"cividis\") +\n  labs(title = \"School Accessibility (0.5 mi Buffer)\",\n       color = \"Schools Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/feature-validation-plots-10.png){width=672}\n:::\n:::\n\n\n**Interpretation:**\n\n-   **Transit proximity**: Most parcels are within 500 ft of a stop, confirming strong transit coverage across Philadelphia.\n\n-   **Hospital proximity**: Right-skewed distribution, consistent with limited facility count.\n\n-   **Parks access**: Sparse exposure (mostly 0–1 within 0.25 mi), highlighting recreational inequities.\n\n-   **Crime exposure**: Wide variation, clustered along high-density corridors; log-transformed to stabilize scale.\n\n-   **School proximity**: Uniform urban coverage with typical parcels having 4-7 schools within 0.5 mi.\n\nNina Histogram + map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_data <- st_read(\"./data/OPA_data.geojson\", quiet = T)\n\nstr(sp_data$sale_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n int [1:23611] 389000 20000 309000 185000 399000 50000 70000 50000 30000 230000 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsp_data_filtered <- sp_data %>%\n  mutate(sale_price = as.numeric(sale_price)) %>%\n  filter(sale_price > 1000)\n\nggplot(sp_data_filtered, aes(x = sale_price)) + \n  geom_histogram(\n    binwidth = 20000, \n    fill = \"grey\",\n    color = \"black\"\n  ) +\n  labs(\n    title = \"Histogram of Sale Prices in Philadelphia\", \n    x = \"Sale Price\",\n    y = \"Count of Homes\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = label_dollar()) +\n  coord_cartesian(xlim = c(0, 2000000), ylim = c(0, 3000))\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/sales-data-histogram-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(sp_data_filtered$sale_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n    1500   170000   269000   348626   395000 30000000 \n```\n\n\n:::\n\n```{.r .cell-code}\nsp_data_filtered <- sp_data_filtered %>%\n  mutate(\n    sale_price = as.numeric(sale_price),\n    sale_price_capped = pmin(sale_price, quantile(sale_price, 0.99, na.rm = TRUE))\n  )\n\nggplot(sp_data_filtered) +\n  geom_sf(aes(color = sale_price_capped), size = 0.6, alpha = 0.7) +\n  scale_color_viridis_c(labels = label_dollar(), name = \"Sale Price (USD)\") +\n  labs(title = \"Philadelphia Sale Prices\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/sales-data-histogram-2.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to check for statistically significant correlations between independent variables\nsig_corr <- function(dat, dep_var) {\n  # remove the independent variable from the dataset\n  dat_corr <- dat %>% select(-all_of(dep_var))\n  \n  # run a correlation matrix for the independent vars\n  correlation_matrix <- rcorr(as.matrix(dat_corr))\n  values <- correlation_matrix$r\n  vifs <- apply(values, 1, function(x){\n    return(round(1/(1-abs(x)), 2))\n  })\n  \n  values_df <- values %>% as.data.frame()\n  vifs_df <- vifs %>% as.data.frame()\n  \n  # convert correlation coefficients and p-values to long format\n  corCoeff_df <- correlation_matrix$r %>% \n    as.data.frame() %>% \n    mutate(var1 = rownames(.))\n  \n  corVIF_df <- vifs %>% \n    as.data.frame() %>% \n    mutate(var1 = rownames(.))\n  \n  corPval_df <- correlation_matrix$P %>% \n    as.data.frame() %>% \n    mutate(var1 = rownames(.))\n  \n  # merge long format data\n  corMerge <- list(\n    corCoeff_df %>% pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\") %>% as.data.frame(),\n    corVIF_df %>% pivot_longer(-var1, names_to = \"var2\", values_to = \"vif_factor\") %>% as.data.frame(),\n    corPval_df %>% pivot_longer(-var1, names_to = \"var2\", values_to = \"p_value\") %>% as.data.frame()) %>%\n    reduce(left_join, by = c(\"var1\", \"var2\"))\n  \n  # filter to isolate unique pairs, then rows with correlation > 0.5 and p < 0.05\n  corUnfiltered <- corMerge %>% \n    filter(var1 != var2) %>% \n    rowwise() %>% \n    filter(var1 < var2) %>% \n    ungroup() %>% \n    as.data.frame()\n  \n  corFiltered <- corUnfiltered %>% \n    filter(abs(vif_factor) > 3 & p_value < 0.05) %>% \n    arrange(desc(abs(correlation)))\n  \n  # save the raw correlation values and the filtered variable pairs\n  final <- set_names(list(values_df, vifs_df, corUnfiltered, corFiltered),\n                     c(\"R2\", \"VIF\", \"AllCor\", \"SelCor\"))\n  \n  return(final)\n}\n\n# create a dataset with just modeling variables\nOPA_modelvars <- OPA_points %>% select(sale_price, total_livable_area, building_age, number_of_bedrooms, number_of_bathrooms,\n                                       pop_totE, med_hh_incE, med_ageE,\n                                       dist_nearest_transit_ft, dist_nearest_hospital_ft, parks_cnt_0p25mi, log1p_crime_cnt_0p5, schools_cnt_0p5mi,\n                                       )\n\n# calculate VIFs and determine potentially troublesome correlations between variables\nvif_check <- sig_corr(OPA_modelvars %>% st_drop_geometry(), dep_var = \"sale_price\")\n\nkable(vif_check[[\"VIF\"]])\n```\n\n::: {.cell-output-display}\n\n\n|                         | total_livable_area| building_age| number_of_bedrooms| number_of_bathrooms| pop_totE| med_hh_incE| med_ageE| dist_nearest_transit_ft| dist_nearest_hospital_ft| parks_cnt_0p25mi| log1p_crime_cnt_0p5| schools_cnt_0p5mi|\n|:------------------------|------------------:|------------:|------------------:|-------------------:|--------:|-----------:|--------:|-----------------------:|------------------------:|----------------:|-------------------:|-----------------:|\n|total_livable_area       |                Inf|         1.22|               1.70|                1.99|     1.14|        1.24|     1.07|                    1.07|                     1.01|             1.03|                1.22|              1.03|\n|building_age             |               1.22|          Inf|               1.01|                1.32|     1.04|        1.23|     1.18|                    1.21|                     1.12|             1.05|                1.43|              1.24|\n|number_of_bedrooms       |               1.70|         1.01|                Inf|                2.26|     1.02|        1.09|     1.05|                    1.05|                     1.03|             1.01|                1.07|              1.02|\n|number_of_bathrooms      |               1.99|         1.32|               2.26|                 Inf|     1.12|        1.25|     1.03|                    1.02|                     1.04|             1.01|                1.09|              1.01|\n|pop_totE                 |               1.14|         1.04|               1.02|                1.12|      Inf|        1.33|     1.16|                    1.09|                     1.18|             1.00|                1.01|              1.08|\n|med_hh_incE              |               1.24|         1.23|               1.09|                1.25|     1.33|         Inf|     1.13|                    1.01|                     1.13|             1.04|                1.31|              1.03|\n|med_ageE                 |               1.07|         1.18|               1.05|                1.03|     1.16|        1.13|      Inf|                    1.15|                     1.27|             1.15|                1.70|              1.25|\n|dist_nearest_transit_ft  |               1.07|         1.21|               1.05|                1.02|     1.09|        1.01|     1.15|                     Inf|                     1.25|             1.11|                1.72|              1.45|\n|dist_nearest_hospital_ft |               1.01|         1.12|               1.03|                1.04|     1.18|        1.13|     1.27|                    1.25|                      Inf|             1.10|                1.85|              1.66|\n|parks_cnt_0p25mi         |               1.03|         1.05|               1.01|                1.01|     1.00|        1.04|     1.15|                    1.11|                     1.10|              Inf|                1.25|              1.23|\n|log1p_crime_cnt_0p5      |               1.22|         1.43|               1.07|                1.09|     1.01|        1.31|     1.70|                    1.72|                     1.85|             1.25|                 Inf|              2.46|\n|schools_cnt_0p5mi        |               1.03|         1.24|               1.02|                1.01|     1.08|        1.03|     1.25|                    1.45|                     1.66|             1.23|                2.46|               Inf|\n\n\n:::\n:::\n\n\nNone of the variables tested have a significant VIF score that is above 3, indicating that there is little concern of multicollinearity in the models moving forward.\n\n# Model Building\n\n## Model 1: Structural Terms\n\nOur first model uses structural property characteristics to build a multiple linear regression, regressing sale price on total livable area, number of bedrooms, number of bathrooms, and building age.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age,\n\n  data = na.omit(OPA_points)\n)\n\nsummary(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ total_livable_area + number_of_bedrooms + \n    number_of_bathrooms + building_age, data = na.omit(OPA_points))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1063434   -92640   -20598    58880  7759292 \n\nCoefficients:\n                      Estimate Std. Error t value            Pr(>|t|)    \n(Intercept)         -11217.250  12625.853  -0.888               0.374    \ntotal_livable_area     221.516      5.126  43.217 <0.0000000000000002 ***\nnumber_of_bedrooms  -34668.316   3239.669 -10.701 <0.0000000000000002 ***\nnumber_of_bathrooms  70054.014   3967.307  17.658 <0.0000000000000002 ***\nbuilding_age           144.447    104.814   1.378               0.168    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 233700 on 10324 degrees of freedom\nMultiple R-squared:  0.2762,\tAdjusted R-squared:  0.2759 \nF-statistic: 984.7 on 4 and 10324 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n## Model 2: Incorporation of Census Data\n\nOur second model builds on the structural property characteristics regression by incorporating census tract–level variables, including population, median household income, and median age.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2 <- lm(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age +\n\n    pop_totE +\n    med_hh_incE +\n    med_ageE,            \n    \n  data = na.omit(OPA_points)\n)\n\nsummary(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ total_livable_area + number_of_bedrooms + \n    number_of_bathrooms + building_age + pop_totE + med_hh_incE + \n    med_ageE, data = na.omit(OPA_points))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-811594  -68780  -14242   37407 7882319 \n\nCoefficients:\n                        Estimate   Std. Error t value             Pr(>|t|)    \n(Intercept)         -146801.0740   22092.0331  -6.645      0.0000000000319 ***\ntotal_livable_area      182.7335       4.9502  36.914 < 0.0000000000000002 ***\nnumber_of_bedrooms   -17516.7805    3085.6817  -5.677      0.0000000140948 ***\nnumber_of_bathrooms   57541.2262    3746.3467  15.359 < 0.0000000000000002 ***\nbuilding_age            101.4828     101.8382   0.997                0.319    \npop_totE                 -7.5113       1.3699  -5.483      0.0000000427396 ***\nmed_hh_incE               2.5838       0.0747  34.587 < 0.0000000000000002 ***\nmed_ageE                496.0580     357.9537   1.386                0.166    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 219700 on 10321 degrees of freedom\nMultiple R-squared:  0.3601,\tAdjusted R-squared:  0.3596 \nF-statistic: 829.6 on 7 and 10321 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n## Model 3: Incorporation of Spatial Features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel3 <- lm(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age +\n    total_area +\n    \n    pop_totE +\n    med_hh_incE +\n    med_ageE +  \n\n    dist_nearest_transit_ft +\n    dist_nearest_hospital_ft +\n    parks_cnt_0p25mi +\n    log1p_crime_cnt_0p5,\n    \n  data = na.omit(OPA_points)\n)\n\nsummary(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ total_livable_area + number_of_bedrooms + \n    number_of_bathrooms + building_age + total_area + pop_totE + \n    med_hh_incE + med_ageE + dist_nearest_transit_ft + dist_nearest_hospital_ft + \n    parks_cnt_0p25mi + log1p_crime_cnt_0p5, data = na.omit(OPA_points))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-918622  -69409  -13313   39352 7885223 \n\nCoefficients:\n                              Estimate    Std. Error t value\n(Intercept)              -289389.72800   43835.43314  -6.602\ntotal_livable_area           163.81413       5.66568  28.913\nnumber_of_bedrooms        -14332.17264    3085.56771  -4.645\nnumber_of_bathrooms        56709.54871    3736.10986  15.179\nbuilding_age                -222.10682     113.51440  -1.957\ntotal_area                     5.78505       0.77111   7.502\npop_totE                      -6.85531       1.38216  -4.960\nmed_hh_incE                    2.68609       0.08168  32.885\nmed_ageE                    1083.06454     372.86412   2.905\ndist_nearest_transit_ft        1.24920       7.45395   0.168\ndist_nearest_hospital_ft      -4.89917       0.77986  -6.282\nparks_cnt_0p25mi            3091.57102    3616.67557   0.855\nlog1p_crime_cnt_0p5        21993.96382    4390.91681   5.009\n                                     Pr(>|t|)    \n(Intercept)                0.0000000000426363 ***\ntotal_livable_area       < 0.0000000000000002 ***\nnumber_of_bedrooms         0.0000034443890756 ***\nnumber_of_bathrooms      < 0.0000000000000002 ***\nbuilding_age                          0.05042 .  \ntotal_area                 0.0000000000000679 ***\npop_totE                   0.0000007166463747 ***\nmed_hh_incE              < 0.0000000000000002 ***\nmed_ageE                              0.00368 ** \ndist_nearest_transit_ft               0.86691    \ndist_nearest_hospital_ft   0.0000000003474868 ***\nparks_cnt_0p25mi                      0.39268    \nlog1p_crime_cnt_0p5        0.0000005562888726 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 218400 on 10316 degrees of freedom\nMultiple R-squared:  0.3679,\tAdjusted R-squared:  0.3672 \nF-statistic: 500.4 on 12 and 10316 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n## Model 4: Incorporation of Interactions and Fixed Effects\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# join data separately here to avoid conflicts with earlier code blocks\nneighbor_points_unique <- neighbor_points %>%\n  st_drop_geometry() %>%\n  distinct(census_tract, .keep_all = TRUE)\n\nneighbor_points_unique <- neighbor_points %>%\n  st_drop_geometry() %>%\n  group_by(census_tract) %>%\n  dplyr::summarize(\n    wealthy_neighborhood = first(wealthy_neighborhood),\n    n_sales = mean(n_sales, na.rm = TRUE),\n    median_price = mean(median_price, na.rm = TRUE),\n    price_class = first(price_class)\n  )\n\nOPA_points_copy <- OPA_points\n\nOPA_points_copy <- OPA_points_copy %>%\n  left_join(\n    neighbor_points_unique,\n    by = \"census_tract\"\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel4 <- lm(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age +\n    total_area +\n    \n    pop_totE +\n    med_hh_incE +\n    med_ageE +  \n  \n    dist_nearest_transit_ft +\n    dist_nearest_hospital_ft +\n    parks_cnt_0p25mi +\n    log1p_crime_cnt_0p5 +\n    \n    number_of_bathrooms * wealthy_neighborhood +\n    \n    int_type_tarea +\n    int_value_larea +\n    int_value_tarea +\n    int_larea_econd +\n    int_larea_icond +\n    int_larea_beds,\n    \n                     \n  data = na.omit(OPA_points_copy)\n)\n\nsummary(model4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ total_livable_area + number_of_bedrooms + \n    number_of_bathrooms + building_age + total_area + pop_totE + \n    med_hh_incE + med_ageE + dist_nearest_transit_ft + dist_nearest_hospital_ft + \n    parks_cnt_0p25mi + log1p_crime_cnt_0p5 + number_of_bathrooms * \n    wealthy_neighborhood + int_type_tarea + int_value_larea + \n    int_value_tarea + int_larea_econd + int_larea_icond + int_larea_beds, \n    data = na.omit(OPA_points_copy))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1470208   -55375   -12919    27220  7952460 \n\nCoefficients:\n                                                        Estimate\n(Intercept)                                     50804.2942868418\ntotal_livable_area                                161.4833636006\nnumber_of_bedrooms                              33544.2949630806\nnumber_of_bathrooms                             29510.9349448426\nbuilding_age                                     -361.5685214190\ntotal_area                                          9.1783830238\npop_totE                                           -4.3524199531\nmed_hh_incE                                         1.2687677197\nmed_ageE                                          385.0943632206\ndist_nearest_transit_ft                             4.6491729857\ndist_nearest_hospital_ft                           -3.7333731792\nparks_cnt_0p25mi                                  888.6524026270\nlog1p_crime_cnt_0p5                             -3655.5158646299\nwealthy_neighborhoodWealthy                     50306.4472961846\nint_type_tarea                                     -0.0142724241\nint_value_larea                                     0.0001649308\nint_value_tarea                                    -0.0000082888\nint_larea_econd                                   -10.6608540430\nint_larea_icond                                   -11.9580254120\nint_larea_beds                                    -15.7378041429\nnumber_of_bathrooms:wealthy_neighborhoodWealthy 30549.6540502367\n                                                      Std. Error t value\n(Intercept)                                     45386.8043253226   1.119\ntotal_livable_area                                 14.9141120237  10.828\nnumber_of_bedrooms                               4886.9440583285   6.864\nnumber_of_bathrooms                              3784.7350532246   7.797\nbuilding_age                                      107.1420950235  -3.375\ntotal_area                                          1.4228354029   6.451\npop_totE                                            1.2916996770  -3.370\nmed_hh_incE                                         0.0892368188  14.218\nmed_ageE                                          348.4301790191   1.105\ndist_nearest_transit_ft                             6.9525379355   0.669\ndist_nearest_hospital_ft                            0.7262392184  -5.141\nparks_cnt_0p25mi                                 3368.2635992216   0.264\nlog1p_crime_cnt_0p5                              4325.0724829861  -0.845\nwealthy_neighborhoodWealthy                     14800.2047356945   3.399\nint_type_tarea                                      0.0102210509  -1.396\nint_value_larea                                     0.0000058327  28.277\nint_value_tarea                                     0.0000007422 -11.168\nint_larea_econd                                     2.6257492796  -4.060\nint_larea_icond                                     2.0494931279  -5.835\nint_larea_beds                                      2.0244861360  -7.774\nnumber_of_bathrooms:wealthy_neighborhoodWealthy  7811.8958367032   3.911\n                                                            Pr(>|t|)    \n(Intercept)                                                 0.263012    \ntotal_livable_area                              < 0.0000000000000002 ***\nnumber_of_bedrooms                               0.00000000000707791 ***\nnumber_of_bathrooms                              0.00000000000000693 ***\nbuilding_age                                                0.000742 ***\ntotal_area                                       0.00000000011627534 ***\npop_totE                                                    0.000756 ***\nmed_hh_incE                                     < 0.0000000000000002 ***\nmed_ageE                                                    0.269087    \ndist_nearest_transit_ft                                     0.503701    \ndist_nearest_hospital_ft                         0.00000027874553957 ***\nparks_cnt_0p25mi                                            0.791915    \nlog1p_crime_cnt_0p5                                         0.398023    \nwealthy_neighborhoodWealthy                                 0.000679 ***\nint_type_tarea                                              0.162632    \nint_value_larea                                 < 0.0000000000000002 ***\nint_value_tarea                                 < 0.0000000000000002 ***\nint_larea_econd                                  0.00004941038728513 ***\nint_larea_icond                                  0.00000000555351949 ***\nint_larea_beds                                   0.00000000000000835 ***\nnumber_of_bathrooms:wealthy_neighborhoodWealthy  0.00009263523781498 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 203000 on 10308 degrees of freedom\nMultiple R-squared:  0.4544,\tAdjusted R-squared:  0.4534 \nF-statistic: 429.3 on 20 and 10308 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n\n```{.r .cell-code}\n#there is only a premium on wealth neighborhood for total area, total livable area, and number of bathrooms that are significant. There is also a significant value for int_value_larea just from interacting the OPA data itsself which just assesses market value and size scalability. \n```\n:::\n\n\n## Comparison of Model Performance\n\nWe can evaluate performance by conducting a 10-fold cross-validation of the 4 models, and comparing their RMSE, MAE, and $R^2$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define 10-fold CV\ntrain_control <- trainControl(\n  method = \"cv\",\n  number = 10,\n  savePredictions = \"final\"\n)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 1: Structural Features Only\nmodel1_cv <- train(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age,\n  data = na.omit(OPA_points),\n  method = \"lm\",\n  trControl = train_control\n)\n\nmodel1_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression \n\n10329 samples\n    5 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 9295, 9297, 9296, 9297, 9296, 9296, ... \nResampling results:\n\n  RMSE      Rsquared   MAE     \n  230140.4  0.2865262  115174.1\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 2: Structural + Census\nmodel2_cv <- train(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age +\n    pop_totE +\n    med_hh_incE +\n    med_ageE,\n  data = na.omit(OPA_points),\n  method = \"lm\",\n  trControl = train_control\n)\n\nmodel2_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression \n\n10329 samples\n    8 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 9296, 9296, 9297, 9297, 9297, 9296, ... \nResampling results:\n\n  RMSE      Rsquared   MAE     \n  215430.3  0.3799429  90217.97\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 3: Structural + Census + Spatial\nmodel3_cv <- train(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age +\n    total_area +\n    \n    pop_totE +\n    med_hh_incE +\n    med_ageE +  \n\n    dist_nearest_transit_ft +\n    dist_nearest_hospital_ft +\n    parks_cnt_0p25mi +\n    log1p_crime_cnt_0p5,\n  data = na.omit(OPA_points),\n  method = \"lm\",\n  trControl = train_control\n)\n\nmodel3_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression \n\n10329 samples\n   13 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 9295, 9297, 9295, 9295, 9296, 9298, ... \nResampling results:\n\n  RMSE      Rsquared   MAE     \n  211021.3  0.4053303  90144.74\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model 4: Structural + Census + Spatial + Interaction\nmodel4_cv <- train(\n  sale_price ~ \n    total_livable_area +\n    number_of_bedrooms +\n    number_of_bathrooms +\n    building_age +\n    total_area +\n    \n    pop_totE +\n    med_hh_incE +\n    med_ageE +  \n  \n    dist_nearest_transit_ft +\n    dist_nearest_hospital_ft +\n    parks_cnt_0p25mi +\n    log1p_crime_cnt_0p5 +\n    \n    number_of_bathrooms * wealthy_neighborhood +\n    \n    int_type_tarea +\n    int_value_larea +\n    int_value_tarea +\n    int_larea_econd +\n    int_larea_icond +\n    int_larea_beds,\n  \n  data = na.omit(OPA_points_copy),\n  method = \"lm\",\n  trControl = train_control\n)\n\nmodel4_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression \n\n10329 samples\n   20 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 9297, 9296, 9296, 9296, 9296, 9297, ... \nResampling results:\n\n  RMSE      Rsquared   MAE     \n  196081.1  0.4895234  71582.45\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncv_results <- data.frame(\n  Model = c(\"Model 1\", \n            \"Model 2\", \n            \"Model 3\", \n            \"Model 4\"),\n  RMSE = c(\n        model1_cv$results$RMSE,\n        model2_cv$results$RMSE,\n        model3_cv$results$RMSE,\n        model4_cv$results$RMSE\n      ),\n    MAE = c(\n        model1_cv$results$MAE,\n        model2_cv$results$MAE,\n        model3_cv$results$MAE,\n        model4_cv$results$MAE\n      ),\n  R_squared = c(\n        model1_cv$results$Rsquared,\n        model2_cv$results$Rsquared,\n        model3_cv$results$Rsquared,\n        model4_cv$results$Rsquared\n      )\n)\n\nprint(cv_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Model     RMSE       MAE R_squared\n1 Model 1 230140.4 115174.13 0.2865262\n2 Model 2 215430.3  90217.97 0.3799429\n3 Model 3 211021.3  90144.74 0.4053303\n4 Model 4 196081.1  71582.45 0.4895234\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create model coefficient table in stargazer\nmodels_list <- list(model1, model2, model3, model4)\nmodels_summary_table <- stargazer(models_list, type = \"text\", style = \"default\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n=============================================================================================================================================================\n                                                                                             Dependent variable:                                             \n                                                -------------------------------------------------------------------------------------------------------------\n                                                                                                 sale_price                                                  \n                                                           (1)                        (2)                         (3)                         (4)            \n-------------------------------------------------------------------------------------------------------------------------------------------------------------\ntotal_livable_area                                      221.516***                 182.734***                 163.814***                  161.483***         \n                                                         (5.126)                    (4.950)                     (5.666)                    (14.914)          \n                                                                                                                                                             \nnumber_of_bedrooms                                    -34,668.320***             -17,516.780***             -14,332.170***               33,544.290***       \n                                                       (3,239.669)                (3,085.682)                 (3,085.568)                 (4,886.944)        \n                                                                                                                                                             \nnumber_of_bathrooms                                   70,054.010***              57,541.230***               56,709.550***               29,510.940***       \n                                                       (3,967.307)                (3,746.347)                 (3,736.110)                 (3,784.735)        \n                                                                                                                                                             \nbuilding_age                                             144.447                    101.483                    -222.107*                  -361.569***        \n                                                        (104.814)                  (101.838)                   (113.514)                   (107.142)         \n                                                                                                                                                             \ntotal_area                                                                                                     5.785***                    9.178***          \n                                                                                                                (0.771)                     (1.423)          \n                                                                                                                                                             \npop_totE                                                                           -7.511***                   -6.855***                   -4.352***         \n                                                                                    (1.370)                     (1.382)                     (1.292)          \n                                                                                                                                                             \nmed_hh_incE                                                                         2.584***                   2.686***                    1.269***          \n                                                                                    (0.075)                     (0.082)                     (0.089)          \n                                                                                                                                                             \nmed_ageE                                                                            496.058                  1,083.065***                   385.094          \n                                                                                   (357.954)                   (372.864)                   (348.430)         \n                                                                                                                                                             \ndist_nearest_transit_ft                                                                                          1.249                       4.649           \n                                                                                                                (7.454)                     (6.953)          \n                                                                                                                                                             \ndist_nearest_hospital_ft                                                                                       -4.899***                   -3.733***         \n                                                                                                                (0.780)                     (0.726)          \n                                                                                                                                                             \nparks_cnt_0p25mi                                                                                               3,091.571                    888.652          \n                                                                                                              (3,616.676)                 (3,368.264)        \n                                                                                                                                                             \nlog1p_crime_cnt_0p5                                                                                          21,993.960***                -3,655.516         \n                                                                                                              (4,390.917)                 (4,325.072)        \n                                                                                                                                                             \nwealthy_neighborhoodWealthy                                                                                                              50,306.450***       \n                                                                                                                                         (14,800.200)        \n                                                                                                                                                             \nint_type_tarea                                                                                                                              -0.014           \n                                                                                                                                            (0.010)          \n                                                                                                                                                             \nint_value_larea                                                                                                                            0.0002***         \n                                                                                                                                           (0.00001)         \n                                                                                                                                                             \nint_value_tarea                                                                                                                           -0.00001***        \n                                                                                                                                           (0.00000)         \n                                                                                                                                                             \nint_larea_econd                                                                                                                           -10.661***         \n                                                                                                                                            (2.626)          \n                                                                                                                                                             \nint_larea_icond                                                                                                                           -11.958***         \n                                                                                                                                            (2.049)          \n                                                                                                                                                             \nint_larea_beds                                                                                                                            -15.738***         \n                                                                                                                                            (2.024)          \n                                                                                                                                                             \nnumber_of_bathrooms:wealthy_neighborhoodWealthy                                                                                          30,549.650***       \n                                                                                                                                          (7,811.896)        \n                                                                                                                                                             \nConstant                                               -11,217.250              -146,801.100***             -289,389.700***               50,804.290         \n                                                       (12,625.850)               (22,092.030)               (43,835.430)                (45,386.800)        \n                                                                                                                                                             \n-------------------------------------------------------------------------------------------------------------------------------------------------------------\nObservations                                              10,329                     10,329                     10,329                      10,329           \nR2                                                        0.276                      0.360                       0.368                       0.454           \nAdjusted R2                                               0.276                      0.360                       0.367                       0.453           \nResidual Std. Error                              233,656.600 (df = 10324)   219,730.600 (df = 10321)   218,431.100 (df = 10316)    203,010.600 (df = 10308)  \nF Statistic                                     984.706*** (df = 4; 10324) 829.572*** (df = 7; 10321) 500.373*** (df = 12; 10316) 429.301*** (df = 20; 10308)\n=============================================================================================================================================================\nNote:                                                                                                                             *p<0.1; **p<0.05; ***p<0.01\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot predicted vs actual value plots\nggplot(model1_cv$pred, aes(x = obs, y = pred)) +\n  geom_point(alpha = 0.3) +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(labels = dollar_format()) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Model 1 Cross-Validation: Predicted vs. Actual Sale Price\",\n    x = \"Actual Sale Price\",\n    y = \"Predicted Sale Price\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/cv-scatterplots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(model2_cv$pred, aes(x = obs, y = pred)) +\n  geom_point(alpha = 0.3) +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(labels = dollar_format()) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Model 2 Cross-Validation: Predicted vs. Actual Sale Price\",\n    x = \"Actual Sale Price\",\n    y = \"Predicted Sale Price\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/cv-scatterplots-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(model3_cv$pred, aes(x = obs, y = pred)) +\n  geom_point(alpha = 0.3) +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(labels = dollar_format()) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Model 3 Cross-Validation: Predicted vs. Actual Sale Price\",\n    x = \"Actual Sale Price\",\n    y = \"Predicted Sale Price\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/cv-scatterplots-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(model4_cv$pred, aes(x = obs, y = pred)) +\n  geom_point(alpha = 0.3) +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(labels = dollar_format()) +\n  scale_y_continuous(labels = dollar_format()) +\n  labs(\n    title = \"Model 4 Cross-Validation: Predicted vs. Actual Sale Price\",\n    x = \"Actual Sale Price\",\n    y = \"Predicted Sale Price\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/cv-scatterplots-4.png){width=672}\n:::\n:::\n\n\n# Model Diagnostics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create diagnostic plots\nplot(model4)\n```\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/model-diagnostic-plots-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/model-diagnostic-plots-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/model-diagnostic-plots-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](model_script_files/figure-html/model-diagnostic-plots-4.png){width=672}\n:::\n:::\n\n\nIn the plot of residuals versus fitted values, the data largely displays a random distribution except for a spike in low sale price values. This indicates that the model might be poorly predicting for low sale price values as they don't follow an entirely linear pattern. However, there was no visible cone shape in the data, which was a promising sign that this discrepancy was not due to a trend consistent across the entire dataset. The Q-Q plot indicates that residual values are not perfectly normally distributed, further confirming that the dataset does not seem to display a linear relationship around extreme values. However, an analysis of the residuals in a Cook's Distance plot indicates that despite this lack of normality in the dependent variable, none of the observations are extraordinarily influential. These violations were therefore deemed mild enough to not warrant intervention.\n\n# Conclusion and Recommendations\n\nOur final model had an RMSE value of \\$195,093.2 and an MAE of \\$71,587.66. This was an improvement over previous models, where Model 1 had an RMSE value of \\$315,407.2 and an MAE of \\$146,134.04. Despite these improvements, these values are still extremely high relative to the current median household price in Philadelphia of approximately \\$232,000, according to Zillow. The strongest predicting features utilized in our model included whether the neighborhood a property had a median household income greater than \\$420,000 and could be considered wealthy ($\\beta$ = 47,309.230, p \\< 0.01), the number of bedrooms ($\\beta$ = 35,121.540, p \\< 0.01), and the number of bathrooms ($\\beta$ = 25,942.210, p \\< 0.01). Furthermore, our interaction term between wealthy neighborhood status and the number of bathrooms proved to also strongly influence the model output ($\\beta$ = 22,639.990, p \\< 0.01), indicating that properties in wealthier neighborhoods that have additional bathrooms tend to gain a stronger sale price premium compared to properties in non-wealthy neighborhoods.\n\nSale prices in Philadelphia do not seem to entirely follow a linear relationship, particularly among lower-priced homes. This resulted in limited prediction potential for properties with lower sale prices. This could produce potential equity issues related to pricing homes of lesser value and those in lower-income neighborhoods that are impacted by surrounding properties. Many of the variables used were simply aggregated without being weighted, such as how the count of crime incidents within a half-mile does not take into account the severity of such events or how the quality of parks within a quarter-mile of a property is not considered. This could over- or under-emphasize these variables in the model.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}