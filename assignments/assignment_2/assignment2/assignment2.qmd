---
title: "Assignment 2: Spatial Analysis and Visualization"
subtitle: "Healthcare Access and Equity in Pennsylvania"
author: "Kavana Raju"
date: today
format: 
  html:
    code-fold: false
    toc: true
    toc-location: left
    theme: cosmo
    embed-resources: true
execute:
  warning: false
  message: false
---

## Assignment Overview

**Learning Objectives:**
- Apply spatial operations to answer policy-relevant research questions
- Integrate census demographic data with spatial analysis
- Create publication-quality visualizations and maps
- Work with spatial data from multiple sources
- Communicate findings effectively for policy audiences

---

## Part 1: Healthcare Access for Vulnerable Populations

### Research Question

**Which Pennsylvania counties have the highest proportion of vulnerable populations (elderly + low-income) living far from hospitals?**

Your analysis should identify counties that should be priorities for healthcare investment and policy intervention.

### Required Analysis Steps

Complete the following analysis, documenting each step with code and brief explanations:

#### Step 1: Data Collection (5 points)

Load the required spatial data:
- Pennsylvania county boundaries
- Pennsylvania hospitals (from lecture data)
- Pennsylvania census tracts

**Your Task:**
```{r}
# Load required packages
library(tidycensus)
library(tidyverse)
library(tigris)
library(scales)
library(sf)
library(knitr)
library(patchwork)
library(here)

# Load spatial data
pa_counties <- st_read("./data/Pennsylvania_County_Boundaries.shp", quiet = TRUE)
hospitals <- st_read("./data/hospitals.geojson", quiet = TRUE)
census_tracts <- tracts(state = "PA", cb = TRUE, progress_bar = FALSE)

# Check that all data loaded correctly
glimpse(pa_counties)
glimpse(hospitals)
glimpse(census_tracts)

cat("pa_counties CRS:",   st_crs(pa_counties)$input,   " EPSG:", st_crs(pa_counties)$epsg, "\n")
cat("hospitals CRS:",     st_crs(hospitals)$input,     " EPSG:", st_crs(hospitals)$epsg, "\n")
cat("census_tracts CRS:", st_crs(census_tracts)$input, " EPSG:", st_crs(census_tracts)$epsg, "\n")

cat("Hospitals in dataset:", nrow(hospitals), "\n")
cat("Census tracts in dataset:", nrow(census_tracts), "\n")
```

**Questions to answer:**

- How many hospitals are in your dataset?
  - 223 hospitals.

- How many census tracts?
  - 3445 census tracts.
  
- What coordinate reference system is each dataset in?
  - PA county boundaries CRS is WGS 84 Pseudo Mercator EPSG 3857
  - PA hospitals CRS is WGS 84 EPSG 4326
  - PA census tracts CRS is NAD 83 EPSG 4269
  
---

#### Step 2: Get Demographic Data 

Use `tidycensus` to download tract-level demographic data for Pennsylvania.

**Required variables:**

- Total population
- Median household income
- Population 65 years and over (you may need to sum multiple age categories)

**Your Task:**
```{r}
# Get demographic data from ACS

acs_vars_2022 <- load_variables(2022, "acs5", cache = TRUE) 

acs_vars_2022_65_above <- acs_vars_2022 %>% 
  filter(concept == "Sex by Age") %>%
  filter(str_detect(label, "([6-9][5-9]|[7-9][0-9]|85).*years"))

acs_age_pop <- acs_vars_2022_65_above$name

# In the wide format, we need names assigned to the 12 population vars based on age and sex
names(acs_age_pop) <- acs_vars_2022_65_above$label %>%
  str_to_lower() %>%
  str_replace_all("estimate!!(total!!)?", "") %>%  # remove 'estimate!!' and 'total!!' if present
  str_replace_all("!!|and| ", "_") %>%           # replace !!, 'and', and spaces with _
  str_replace_all("years", "") %>%               # remove 'years'
  str_replace_all("[^a-z0-9_]", "")             # remove any remaining punctuation

tract_demographics <- get_acs(
  geography = "tract",
  variables = c(
    total_pop = "B01003_001",
    median_income = "B19013_001",
    acs_age_pop
  ),
  state = "PA",
  year = 2022,
  output = "wide"
)

final_tract_demographics <- tract_demographics %>%
  mutate(
    pop_65_plus = rowSums(
      select(., starts_with("total_male_") | starts_with("total_female_")) %>%
        select(., ends_with("E")),
      na.rm = TRUE
    )
  ) %>%
  select(GEOID, NAME, total_popE, median_incomeE, pop_65_plus, 
         total_popM, median_incomeM)

# Join to tract boundaries
tracts_with_data <- census_tracts %>%
  left_join(final_tract_demographics, by = "GEOID")

sum(is.na(tracts_with_data$median_incomeE))
median(tracts_with_data$median_incomeE, na.rm = TRUE)

```

**Questions to answer:**

- What year of ACS data are you using?
  - 2022 ACS Data
  
- How many tracts have missing income data?
  - 62 tracts

- What is the median income across all PA census tracts?
  - $70188

---

#### Step 3: Define Vulnerable Populations 

Identify census tracts with vulnerable populations based on TWO criteria:
1. Low median household income (choose an appropriate threshold)
2. Significant elderly population (choose an appropriate threshold)

**Your Task:**
```{r}
# Filter for vulnerable tracts based on your criteria
tracts_with_data <- tracts_with_data %>%
  mutate(
    pct_65_plus = 100 * pop_65_plus / if_else(total_popE > 0, total_popE, NA_real_)
  )

# Compute thresholds on valid rows only
valid_rows <- filter(tracts_with_data, !is.na(median_incomeE), !is.na(pct_65_plus))

income_threshold  <- quantile(valid_rows$median_incomeE, 0.25, na.rm = TRUE)
elderly_threshold <- quantile(valid_rows$pct_65_plus,   0.75, na.rm = TRUE)

# Flag vulnerability only when both pieces exist
tracts_with_data <- tracts_with_data %>%
  mutate(
    low_income  = if_else(!is.na(median_incomeE), median_incomeE <= income_threshold, NA),
    high_elderly = if_else(!is.na(pct_65_plus),   pct_65_plus   >= elderly_threshold, NA),
    vulnerable = low_income & high_elderly
  )

# Counts over tracts with known vulnerability status
n_vulnerable <- sum(tracts_with_data$vulnerable %in% TRUE, na.rm = TRUE)
n_known      <- sum(!is.na(tracts_with_data$vulnerable))
pct_vulnerable <- 100 * n_vulnerable / n_known

# Print thresholds and results to keep prose in sync
cat("Income threshold Q1:", scales::dollar(round(income_threshold)), "\n")
cat("Age 65+ threshold Q3:", round(elderly_threshold, 1), "%\n")
cat("Vulnerable tracts:", n_vulnerable, "of", n_known,
    "(", scales::percent(pct_vulnerable/100, accuracy = 0.1), ")\n")

```

**Questions to answer:**

- What income threshold did you choose and why?
  - I based the income cutoff on statewide percentiles to identify areas that fall noticeably below the typical income level in Pennsylvania. The lower quartile served as the cutoff, representing the bottom twenty-five percent of tract median incomes.For the 2022 data this value is approximately $55924. This approach updates automatically whenever new census data are released, keeping the measure consistent over time.

- What elderly population threshold did you choose and why?
  - For the older-adult population I again relied on a percentile measure, selecting the upper quartile of tracts with the largest shares of residents aged sixty-five and above. This captures neighborhoods with a noticeably higher concentration of older adults compared with the rest of the state. In the 2022 data that threshold is around 23.1 percent of residents aged sixty-five or older.

- How many tracts meet your vulnerability criteria?
  - A total of 165 tracts satisfy both parts of the definition, combining lower household incomes with larger elderly populations relative to other Pennsylvania tracts.

- What percentage of PA census tracts are considered vulnerable by your definition?
  - ~ 4.8% of PA census tracts are considered vulnerable.

---

#### Step 4: Calculate Distance to Hospitals 

For each vulnerable tract, calculate the distance to the nearest hospital.

**Your Task:**
```{r}
# Transform to appropriate projected CRS
pa_projection <- 3365 # NAD83 / Pennsylvania South

pa_counties <- st_transform(pa_counties, crs = pa_projection)
tracts_with_data <- st_transform(tracts_with_data, crs = pa_projection)
hospitals <- st_transform(hospitals, crs = pa_projection)

# Calculate distance from each tract centroid to nearest hospital
tract_centroids <- st_centroid(tracts_with_data)
tracts_with_data <- tracts_with_data %>%
  mutate(
    dist_to_hospital = st_distance(tract_centroids, hospitals)  %>% 
    apply(1, min) %>% 
    as.numeric() / 1609.34
  )

tracts_with_data %>%
  st_drop_geometry() %>%
  filter(vulnerable == TRUE) %>%
  summarise(
    avg_distance = mean(dist_to_hospital, na.rm = TRUE),
    max_distance = max(dist_to_hospital, na.rm = TRUE),
    more_than_15_miles = sum(dist_to_hospital > 15, na.rm = TRUE),
  )

```

**Requirements:**

- Use an appropriate projected coordinate system for Pennsylvania

- Calculate distances in miles

- Explain why you chose your projection
  - I used the NAD 83 Pennsylvania South projection EPSG 3365 to keep measurements in linear units across the state. I also considered using the NAD 83 Conus Albers projection EPSG 5070 since it offers consistent accuracy statewide, but chose 3365 for efficiency and compatibility with the existing data. The distortion in northern counties is minor and acceptable for this level of analysis.

**Questions to answer:**

- What is the average distance to the nearest hospital for vulnerable tracts?
  - 15.57 miles

- What is the maximum distance?
  - 62.86 miles

- How many vulnerable tracts are more than 15 miles from the nearest hospital?
  - 56 tracts

---

#### Step 5: Identify Underserved Areas 

Define "underserved" as vulnerable tracts that are more than 15 miles from the nearest hospital.

**Your Task:**
```{r}
# Create underserved variable
tracts_with_data <- tracts_with_data %>%
  mutate(
    underserved = vulnerable & dist_to_hospital > 15
  )

tracts_with_data %>%
  st_drop_geometry() %>%
  summarise(
    n_underserved = sum(underserved, na.rm = TRUE),
    n_vulnerable = sum(vulnerable, na.rm = TRUE),
    pct_vulnerable_underserved = sum(underserved, na.rm = TRUE) / sum(vulnerable, na.rm = TRUE) * 100
  )

```

**Questions to answer:**
- How many tracts are underserved?
  - 56 tracts

- What percentage of vulnerable tracts are underserved?
  - 33.94%

- Does this surprise you? Why or why not?
  - Not really. Most of these tracts are found in rural parts of Pennsylvania where hospitals are spread farther apart. These areas also tend to have older populations and lower incomes, so longer travel distances to healthcare facilities are expected.

---

#### Step 6: Aggregate to County Level

Use spatial joins and aggregation to calculate county-level statistics about vulnerable populations and hospital access.

**Your Task:**
```{r}
# Spatial join tracts to counties
tracts_by_county <- tracts_with_data %>% 
  st_join(pa_counties %>% select(COUNTY_NAM), largest = TRUE)

# Aggregate statistics by county
county_stats <- tracts_by_county %>%
  st_drop_geometry() %>%
  group_by(COUNTY_NAM) %>%
  summarise(
    total_tracts = n(), # including to understand the scale of the county
    vulnerable_tracts = sum(vulnerable, na.rm = TRUE),
    underserved_tracts = sum(underserved, na.rm = TRUE),
    pct_vulnerable_underserved = round(
      ifelse(vulnerable_tracts > 0, 
             (underserved_tracts / vulnerable_tracts) * 100, 0), 1),
    avg_dist_to_hospital = round(mean(dist_to_hospital, na.rm = TRUE), 2),
    total_pop_in_vulnerable = sum(total_popE[vulnerable == TRUE], na.rm = TRUE),
  )  %>%
  arrange(desc(pct_vulnerable_underserved))

county_stats %>%
  kable(col.names = c("County", "Total Tracts", "Vulnerable Tracts", 
                      "Underserved Tracts", "% Vulnerable", "Avg Distance (mi)", "Total Pop in Vulnerable Tracts"))

county_stats %>%
  head(18) %>%
  select(COUNTY_NAM, vulnerable_tracts, underserved_tracts, pct_vulnerable_underserved)

tracts_by_county %>%
  st_drop_geometry() %>%
  filter(underserved == TRUE) %>%
  group_by(COUNTY_NAM) %>%
  summarise(
    underserved_tracts = n(),
    vulnerable_pop_far_from_hospitals = sum(total_popE, na.rm = TRUE)
  ) %>%
  arrange(desc(vulnerable_pop_far_from_hospitals)) %>%
  head(5)

```

**Required county-level statistics:**

- Number of vulnerable tracts
- Number of underserved tracts  
- Percentage of vulnerable tracts that are underserved
- Average distance to nearest hospital for vulnerable tracts
- Total vulnerable population

**Questions to answer:**

- Which 5 counties have the highest percentage of underserved vulnerable tracts?
  - 18 counties share the same highest percentage of underserved vulnerable tracts. These are listed in the output table above.

- Which counties have the most vulnerable people living far from hospitals?
  - Fayette, Northumberland, Westmoreland, and Clearfield, and Somerset.

- Are there any patterns in where underserved counties are located?
  - Most underserved counties are rural and spread across central and western Pennsylvania. These areas generally have lower population densities, limited hospital availability, and longer travel distances between communities and healthcare facilities.

---

#### Step 7: Create Summary Table 

Create a professional table showing the top 10 priority counties for healthcare investment.

**Your Task:**
```{r}
# Create and format priority counties table
tracts_by_county %>%
  st_drop_geometry() %>%
  filter(underserved == TRUE) %>%
  group_by(COUNTY_NAM) %>%
  summarise(
    underserved_tracts = n(),
    vulnerable_pop_far_from_hospitals = sum(total_popE, na.rm = TRUE)
  ) %>%
  arrange(desc(vulnerable_pop_far_from_hospitals)) %>%
  head(10) %>%
  kable(
    col.names = c("County", "Underserved Tracts", "Total Population"),
    align = c("l", "r", "r"),
    format.args = list(big.mark = ","),
    caption = "Top 10 Priority Counties for Healthcare Investment - Ranked by total population in underserved vulnerable tracts (>15 miles from nearest hospital)"
  )

```

Note: Vulnerable tracts are those in the lowest twenty-five percent of median household income and the highest twenty-five percent of population aged sixty-five or older. Underserved tracts are the subset of those areas located more than fifteen miles from the nearest hospital.

**Requirements:**
- Use `knitr::kable()` or similar for formatting
- Include descriptive column names
- Format numbers appropriately (commas for population, percentages, etc.)
- Add an informative caption
- Sort by priority (you decide the metric)

---

## Part 2: Comprehensive Visualization 

Using the skills from Week 3 (Data Visualization), create publication-quality maps and charts.

### Map 1: County-Level Choropleth 

The following map illustrates healthcare access disparities across Pennsylvania by showing where vulnerable populations live far from hospitals. Counties are shaded according to the share of vulnerable tracts that are underserved, while hospital locations appear as red circles. The darker blue areas highlight counties with greater accessibility challenges, most notably in rural parts of central and north-eastern Pennsylvania.

```{r}
# Create county-level access map
county_map_data <- pa_counties %>%
  left_join(county_stats, by = "COUNTY_NAM")

ggplot() +
  geom_sf(data = county_map_data, 
          aes(fill = pct_vulnerable_underserved),
          color = "white", 
          size = 0.3) +
  geom_sf(data = hospitals, 
          color = "red", 
          size = 0.5, 
          alpha = 0.75,
          shape = 1) +
  scale_fill_gradient(
    low = "#deebf7",
    high = "#08306b",
    na.value = "grey90",
    name = "% of Vulnerable Census Tracts\nthat are Underserved ",
    labels = function(x) paste0(x, "%")
  ) +
  labs(
    title = "Healthcare Access Challenges in Pennsylvania",
    subtitle = "Percentage of vulnerable tracts in a county that are underserved (>15 miles from a hospital)",
    caption = "Vulnerable tracts: bottom 25% in median income & top 25% in population 65+, relative to the rest of PA\nRed circles indicate hospital locations"
  ) +
  theme_void() +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 0.5),
    legend.position = "left"
  )

```

---

### Map 2: Detailed Vulnerability Map 

This map highlights census tracts that are both economically and demographically vulnerable yet located far from hospitals. The red areas represent tracts whose centers lie more than 15 miles from the nearest hospital. Most of these tracts appear in rural parts of central and western Pennsylvania.

```{r}
# Create detailed tract-level map
ggplot() +
  geom_sf(data = tracts_with_data, 
          fill = "gray85", 
          color = "white", 
          size = 0.1) +
  geom_sf(data = tracts_with_data %>% filter(underserved == TRUE), 
          fill = "red",
          color = "white", 
          size = 0.1) +
  geom_sf(data = pa_counties, 
          fill = NA, 
          color = "black", 
          size = 0.5) +
  # Hospital locations
  geom_sf(data = hospitals, 
          color = "#08306b", 
          size = 0.5, 
          alpha = 0.75,
          shape = 1) +
  labs(
    title = "Underserved Vulnerable Census Tracts in Pennsylvania",
    subtitle = "Red areas show vulnerable tracts where the center is more than 15 miles from the nearest hospital",
    caption = "Vulnerable tracts: bottom 25% in median income & top 25% in population 65+, relative to the rest of PA\nBlue circles indicate hospital locations"
  ) +
  theme_void() +
  theme(
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
    plot.subtitle = element_text(size = 10, hjust = 0.5, margin = margin(b = 10)),
    plot.caption = element_text(size = 8, hjust = 0, margin = margin(t = 10)),
    plot.margin = margin(20, 20, 20, 20)
  )

```

---

### Chart: Distribution Analysis

The histogram below shows how far vulnerable tracts are from their nearest hospital. Most tracts fall within fifteen miles, indicating reasonable access, but a smaller group extends far beyond that distance. The dashed red line marks the fifteen-mile cutoff used to define underserved areas, highlighting the small but significant share of tracts facing long travel distances to care.

**Your Task:**
```{r}
# Create distribution visualization
tracts_with_data %>%
  st_drop_geometry() %>%
  filter(vulnerable == TRUE) %>%
  ggplot(aes(x = dist_to_hospital)) +
  geom_histogram(bins = 30, fill = "#08306b", color = "white") +
  geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
  labs(
    title = "Distance to Nearest Hospital for Vulnerable Tracts",
    x = "Distance (miles)",
    y = "Number of Vulnerable Tracts",
    caption = "Vulnerable tracts represent the lowest quarter of median household income and the highest quarter of residents aged 65 and older across Pennsylvania.\nThe red dashed line marks the 15-mile threshold used to classify underserved areas.\nMost tracts are located close to hospitals, while a smaller number extend far beyond this limit, forming a long right tail in the distribution."
  ) +
  theme_minimal() +
  theme(
    plot.caption = element_text(hjust = 0, size = 8, lineheight = 1.1)
  )

```

---

## Part 3: Bring Your Own Data Analysis 

**Infrastructure & Services: Polling Place Accessibility**
- **Data:** Polling Places, SEPTA stops, Census tracts (elderly population, disability rates)
- **Question:** "Are polling places accessible for elderly and disabled voters?"
- **Operations:** Buffer polling places and transit stops, identify vulnerable populations, find areas lacking access
- **Policy relevance:** Voting rights, election infrastructure, ADA compliance

### Your Analysis

1. **Find and load additional data**
   - Document your data source
   - Check and standardize the CRS
   - Provide basic summary statistics

```{r}
# Load your additional dataset
polling_places <- st_read("./data/polling_places.geojson", quiet = TRUE)
st_crs(polling_places)$input
polling_places <- st_transform(polling_places, crs = pa_projection)
st_crs(polling_places)$input

philly_tracts <- tracts_by_county %>%
  filter(COUNTY_NAM == "PHILADELPHIA")

polling_places %>%
  st_drop_geometry() %>%
  count(accessibility_code) %>%
  mutate(
    percentage = round(n / sum(n) * 100, 1),
    accessibility_type = case_when(
      accessibility_code == "A" ~ "Alternate Entrance",
      accessibility_code == "B" ~ "Substantially Accessible",
      accessibility_code == "F" ~ "Fully Accessible",
      accessibility_code == "M" ~ "Accessibility Modified",
      accessibility_code == "N" ~ "Not Accessible",
      accessibility_code == "R" ~ "Accessible With Ramp",
      TRUE ~ "Unknown"
    )
  ) %>%
  arrange(desc(n)) %>%
  select(accessibility_code, accessibility_type, n, percentage) %>%
  bind_rows(
    summarise(., 
              accessibility_code = "TOTAL",
              accessibility_type = "",
              n = sum(n),
              percentage = sum(percentage))
  ) %>%
  kable(
    col.names = c("Code", "Accessibility Type", "Count", "%"),
    align = c("l", "l", "r", "r"),
    caption = "Polling Locations in Philadelphia by Accesibility Type"
  )

septa_bus_stops <- st_read("./data/2022_SEPTA_Bus_Stops.geojson", quiet = TRUE)

st_crs(septa_bus_stops)$input
septa_bus_stops <- st_transform(septa_bus_stops, crs = pa_projection)
st_crs(septa_bus_stops)$input

philly_bus_stops <- septa_bus_stops %>%
  st_filter(philly_tracts)

```

**Questions to answer:**

- What dataset did you choose and why?
  - I used the polling place dataset because it provides detailed accessibility classifications for each voting site, which helps assess physical access for residents with mobility needs. To complement this, I included SEPTA bus stop data to examine how easily polling sites can be reached by public transit.

- What is the data source and date?
  - The polling place data are from OpenDataPhilly, last updated on December 8, 2014.The SEPTA bus stop dataset comes from the SEPTA Open Data Portal (2022).
  
- How many features does it contain?
  - There are 1,703 polling places in Philadelphia and 18,066 bus stops across SEPTA’s service area. When filtered to bus stops within Philadelphia census tracts, the count reduces to 10,654.

- What CRS is it in? Did you need to transform it?
  - Both datasets were originally in the WGS 84 coordinate system and were reprojected to EPSG 3365 to align with the Pennsylvania State Plane South coordinate system used in this analysis.

---

2. **Pose a research question**

Which polling places in Philadelphia are located beyond 5, 10, and 15 minute walking distances from the nearest bus stop?

---

3. **Conduct spatial analysis**

This step evaluates how far polling sites are from nearby bus stops to identify locations that may be less accessible by public transit. To do this, buffer zones were generated around all bus stops to represent 5, 10, and 15 minute walking distances. Polling locations outside these buffer areas were flagged, and straight-line distances to the nearest stop were calculated for each site.

**Your Task:**
```{r}
# Create walking-distance buffers (0.2, 0.4, 0.6 miles converted to feet)
bus_buf_5 <- st_buffer(philly_bus_stops, dist = 0.20 * 5280)
bus_buf_10 <- st_buffer(philly_bus_stops, dist = 0.40 * 5280)
bus_buf_15 <- st_buffer(philly_bus_stops, dist = 0.60 * 5280)

# Merge buffers into continuous coverage zones for simpler comparison
zone_5 <- st_union(bus_buf_5)
zone_10 <- st_union(bus_buf_10)
zone_15 <- st_union(bus_buf_15)

# Identify polling places that fall outside each buffer zone
polling_out_5 <- polling_places %>% st_difference(zone_5)
polling_out_10 <- polling_places %>% st_difference(zone_10)
polling_out_15 <- polling_places %>% st_difference(zone_15)

# Compute distance from every polling place to its nearest bus stop
polling_access <- polling_places %>%
  mutate(
    dist_to_stop = st_distance(., philly_bus_stops) %>%
      apply(1, min) %>%
      as.numeric() / 5280,  # feet to miles
    over_5  = if_else(is.na(dist_to_stop), FALSE, dist_to_stop > 0.20),
    over_10 = if_else(is.na(dist_to_stop), FALSE, dist_to_stop > 0.40),
    over_15 = if_else(is.na(dist_to_stop), FALSE, dist_to_stop > 0.60)
  )

# Summarize accessibility counts
polling_access %>%
st_drop_geometry() %>%
summarise(
total_sites = n(),
beyond_5min = sum(over_5, na.rm = TRUE),
beyond_10min = sum(over_10, na.rm = TRUE),
beyond_15min = sum(over_15, na.rm = TRUE),
pct_5min = round(beyond_5min / total_sites * 100, 1),
pct_10min = round(beyond_10min / total_sites * 100, 1),
pct_15min = round(beyond_15min / total_sites * 100, 1)
)

#Map 1: Polling places more than 5 minutes from a bus stop
map_5 <- ggplot() +
geom_sf(data = philly_tracts, fill = "gray97", color = "white", linewidth = 0.2) +
geom_sf(data = polling_access %>% filter(over_5),
color = "#1b9e77", size = 0.6, alpha = 0.8) + # Teal
geom_sf(data = polling_access %>% filter(!over_5),
color = "gray70", size = 0.3, alpha = 0.4) +
theme_void() +
labs(title = "Beyond 5-Minute Walk") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 11))

# Map 2: Polling places beyond 10 minutes
map_10 <- ggplot() +
geom_sf(data = philly_tracts, fill = "gray97", color = "white", linewidth = 0.2) +
geom_sf(data = polling_access %>% filter(over_10),
color = "#7570b3", size = 0.6, alpha = 0.8) + # Indigo
geom_sf(data = polling_access %>% filter(!over_10),
color = "gray70", size = 0.3, alpha = 0.4) +
theme_void() +
labs(title = "Beyond 10-Minute Walk") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 11))

# Map 3: Polling places beyond 15 minutes
map_15 <- ggplot() +
geom_sf(data = philly_tracts, fill = "gray97", color = "white", linewidth = 0.2) +
geom_sf(data = polling_access %>% filter(over_15),
color = "#d95f02", size = 0.6, alpha = 0.8) + # Burnt orange accent
geom_sf(data = polling_access %>% filter(!over_15),
color = "gray70", size = 0.3, alpha = 0.4) +
theme_void() +
labs(title = "Beyond 15-Minute Walk") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 11))

# Combine maps
map_5 + map_10 + map_15 +
plot_annotation(
title = "Philadelphia Polling Places Outside Walking Distance from Bus Stops",
subtitle = "Points show polling locations beyond 5, 10, and 15-minute walks to the nearest bus stop",
theme = theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10)
)
)

```

**Interpretation:**
Philadelphia has a total of 1703 polling locations. About 106 of them, or 6 percent, are located more than a five minute walk from a bus stop. Only three sites are farther than ten minutes, and none are beyond fifteen minutes. Most of these polling places are found along the city’s outer areas where the street network is less dense and transit coverage is limited. Overall, the majority of polling sites are within a short walking distance to bus service, but the few distant ones highlight where pedestrian access and transit connectivity could be improved, especially in neighborhoods at the city’s edge.

## Finally - A few comments about your incorporation of feedback!
Broke down my code even more and cleaned up the document.

---

## Submission Requirements

**What to submit:**

1. **Rendered HTML document posted to your course portfolio** with all code, outputs, maps, and text
   - Use `embed-resources: true` in YAML so it's a single file
   - All code should run without errors
   - All maps and charts should display correctly
2. Submit the correct and working links of your assignment on Canvas

---

